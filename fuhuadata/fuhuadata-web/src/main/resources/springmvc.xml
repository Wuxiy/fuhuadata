<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
        
         <!-- 自动扫描,完成bean创建和依赖注入 -->
	    <context:component-scan base-package="com.fuhuadata"/>


		<!-- 使AspectJ注解起作用：自动为匹配的类生成代理对象 -->
		<aop:aspectj-autoproxy proxy-target-class="true"/>
		<bean id="systemLogAspect" class="com.fuhuadata.web.util.SystemLogAspect"/>

	    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --> 
	    <bean id="messageAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
		       <property name="messageConverters">  
		           <list>  
		               <!-- Support JSON -->   
		               <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>  
		           </list>  
		       </property>  
		 </bean>  
		 <bean id="exceptionMessageAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">  
		       <property name="messageConverters">  
		           <list>  
		               <!-- Support JSON -->   
		               <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>  
		           </list>  
		       </property>  
		 </bean>  
		 <!--  <context:annotation-config />  
    	 <mvc:annotation-driven /> -->
	    
         <!-- 配置视图解析器 如何把handler 方法返回值解析为实际的物理视图 -->
         <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
             <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/> 
             <property name = "prefix" value="/WEB-INF/views/"></property>
             <property name = "suffix" value = ".jsp"></property>
         </bean>-->

		<!-- 配置Velocity视图解析器 -->
		<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
			<!--线上环境设置为true-->
			<property name="cache" value="false"/>
			<property name="prefix" value="/WEB-INF/vm/" />
			<property name="suffix" value=".vm"/>
			<property name="contentType" value="text/html;charset=UTF-8"/>
			<!--<property name="toolboxConfigLocation" value="WEB-INF/velocity/toolbox.xml"/>-->
			<property name="exposeSpringMacroHelpers" value="true" /><!--是否使用spring对宏定义的支持-->
			<property name="exposeRequestAttributes" value="true" /><!--是否开放request属性-->
			<property name="requestContextAttribute" value="rc"/><!--request属性引用名称-->
			<property name="dateToolAttribute" value="date" /><!--日期函数名称-->
			<property name="numberToolAttribute" value="number" /><!--数字函数名称-->
		</bean>

		<!-- 配置Velocity引擎 -->
		<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
			<property name="resourceLoaderPath" value="/"/>
			<property name="configLocation" value="classpath:velocity.properties"/>
		</bean>


	<!-- 上传文件的解析器 -->
	     <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	        <property name="defaultEncoding" value="utf-8"/>  
	        <property name="maxUploadSize" value="10485760000"/>  
	        <property name="maxInMemorySize" value="40960"/>  
	     </bean>  
</beans>